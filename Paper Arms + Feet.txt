//@version=6
indicator("Paper Arms + Feet v1.2", overlay=false)

enum LRSI_Type
    LaguerreRSI
    LaguerreRSI_FractalEnergy

lrsiType = input.enum(LRSI_Type.LaguerreRSI_FractalEnergy, "LaguerreRSI Type")


////////////////////////////////////////////////////////////////////////////////
// Heikin-Ashi
////////////////////////////////////////////////////////////////////////////////

haTicker = ticker.heikinashi(syminfo.tickerid)
[haOpen, haHigh, haLow, haClose] = request.security(haTicker, timeframe.period, [open, high, low, close])

showRealOpen = input.bool(true, "Show Real Open", group="Heikin-Ashi")
realOpenColor = input.color(color.white, "Real Open Color", group="Heikin-Ashi")
showRealClose = input.bool(true, "Show Real Close", group="Heikin-Ashi")
realCloseColor = input.color(color.fuchsia, "Real Close Color", group="Heikin-Ashi")

realPrice = ticker.new(prefix=syminfo.prefix, ticker=syminfo.ticker)
[realOpen, realHigh, realLow, realClose] = request.security(realPrice, timeframe.period, [open, high, low, close])

displayRealOpen = showRealOpen ? display.all : display.none
displayRealClose = showRealClose ? display.all : display.none

plotchar(series=chart.is_heikinashi ? realOpen : na, title="Real Open Dots", location=location.absolute, color=realOpenColor, editable=false, char="•", size=size.auto, force_overlay=true, display=displayRealOpen)
plotchar(series=chart.is_heikinashi ? realClose : na, title="Real Close Dots", location=location.absolute, color=realCloseColor, editable=false, char="•", size=size.auto, force_overlay=true, display=displayRealClose)


////////////////////////////////////////////////////////////////////////////////
// EMA Cloud
////////////////////////////////////////////////////////////////////////////////

showEMACloud = input.bool(true, "Show EMA Cloud", group="EMA Cloud")
emaFastLen = input.int(9, "Fast EMA Length", minval=1, group="EMA Cloud")
emaSlowLen = input.int(21, "Slow EMA Length", minval=1, group="EMA Cloud")
emaFast = ta.ema(close, emaFastLen)
emaSlow = ta.ema(close, emaSlowLen)

var displayEMACloud = showEMACloud ? display.all : display.none
emaFastPlot = plot(emaFast, "Fast EMA", color=color.green, linewidth=1, force_overlay=true, display=displayEMACloud)
emaSlowPlot = plot(emaSlow, "Slow EMA", color=color.red, linewidth=1, force_overlay = true, display=displayEMACloud)
fill(emaFastPlot, emaSlowPlot, emaFast >= emaSlow ? color.rgb(76,175,80, 40) : color.rgb(255, 82, 82, 40), "EMA Cloud", display=displayEMACloud)


////////////////////////////////////////////////////////////////////////////////
// Oscillator Regions
////////////////////////////////////////////////////////////////////////////////

plot100 = plot(100, display=display.none, editable=false)
plot80 = plot(80, display=display.none, editable=false)
plot20 = plot(20, display=display.none, editable=false)
plot0 = plot(0, display=display.none, editable=false)
fill(plot100, plot80, color.rgb(56,142,60,40), "Overbought Region")
fill(plot0, plot20, color.rgb(178,40,51,40), "Oversold Region")


////////////////////////////////////////////////////////////////////////////////
// Laguerre RSI
////////////////////////////////////////////////////////////////////////////////

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Developer: John EHLERS
// © KivancOzbilgic
// Author:Kıvanç Özbilgiç
lrsi_alpha = input.float(title='Alpha', minval=0, maxval=1, step=0.1, defval=0.2, group="Laguerre RSI")

lrsi_gamma = 1 - lrsi_alpha
lrsi_L0 = 0.0
lrsi_L0 := (1 - lrsi_gamma) * realClose + lrsi_gamma * nz(lrsi_L0[1])
lrsi_L1 = 0.0
lrsi_L1 := -lrsi_gamma * lrsi_L0 + nz(lrsi_L0[1]) + lrsi_gamma * nz(lrsi_L1[1])
lrsi_L2 = 0.0
lrsi_L2 := -lrsi_gamma * lrsi_L1 + nz(lrsi_L1[1]) + lrsi_gamma * nz(lrsi_L2[1])
lrsi_L3 = 0.0
lrsi_L3 := -lrsi_gamma * lrsi_L2 + nz(lrsi_L2[1]) + lrsi_gamma * nz(lrsi_L3[1])
lrsi_cu = (lrsi_L0 > lrsi_L1 ? lrsi_L0 - lrsi_L1 : 0) + (lrsi_L1 > lrsi_L2 ? lrsi_L1 - lrsi_L2 : 0) + (lrsi_L2 > lrsi_L3 ? lrsi_L2 - lrsi_L3 : 0)
lrsi_cd = (lrsi_L0 < lrsi_L1 ? lrsi_L1 - lrsi_L0 : 0) + (lrsi_L1 < lrsi_L2 ? lrsi_L2 - lrsi_L1 : 0) + (lrsi_L2 < lrsi_L3 ? lrsi_L3 - lrsi_L2 : 0)
lrsi_temp = lrsi_cu + lrsi_cd == 0 ? -1 : lrsi_cu + lrsi_cd
lrsi_LaRSI = 100 * (lrsi_temp == -1 ? 0 : lrsi_cu / lrsi_temp)


////////////////////////////////////////////////////////////////////////////////
// Laguerre RSI with Fractal Energy
// https://usethinkscript.com/threads/rsi-laguerre-with-fractal-energy-for-thinkorswim.116/
////////////////////////////////////////////////////////////////////////////////

nFE = input.int(title="NFE", tooltip="Number of bars used in Fractal Efficiency calculations", minval=1, defval=8, group="Laguerre RSI with Fractal Energy")
Glength = input.int(title="GLength", tooltip="Period length for Go/Gh/Gl/Gc filter", minval=1, defval=13, group="Laguerre RSI with Fractal Energy")
betaDev = input.int(title="BetaDev", tooltip="Controls reactivity in alpha/beta computations", minval=1, defval=8, group="Laguerre RSI with Fractal Energy")

float w = (2.0 * math.pi / Glength)
float beta = (1 - math.cos(w)) / (math.pow(1.414, 2.0 / betaDev) - 1)
float alpha = (-beta + math.sqrt(beta * beta + 2 * beta))
float Go = na
float Gh = na
float Gl = na
float Gc = na
Go := math.pow(alpha, 4) * realOpen + 4 * (1.0 - alpha) * nz(Go[1]) - 6 * math.pow( 1 - alpha, 2) * nz(Go[2]) + 4 * math.pow( 1 - alpha, 3) * nz(Go[3]) - math.pow( 1 - alpha, 4 ) * nz(Go[4])
Gh := math.pow(alpha, 4) * realHigh + 4 * (1.0 - alpha) * nz(Gh[1]) - 6 * math.pow( 1 - alpha, 2 ) * nz(Gh[2]) + 4 * math.pow( 1 - alpha, 3 ) * nz(Gh[3]) - math.pow( 1 - alpha, 4 ) * nz(Gh[4])
Gl := math.pow(alpha, 4) * realLow + 4 * (1.0 - alpha) * nz(Gl[1]) - 6 * math.pow( 1 - alpha, 2 ) * nz(Gl[2]) + 4 * math.pow( 1 - alpha, 3 ) * nz(Gl[3]) - math.pow( 1 - alpha, 4 ) * nz(Gl[4])
Gc := math.pow(alpha, 4) * realClose + 4 * (1.0 - alpha) * nz(Gc[1]) - 6 * math.pow( 1 - alpha, 2 ) * nz(Gc[2]) + 4 * math.pow( 1 - alpha, 3 ) * nz(Gc[3]) - math.pow( 1 - alpha, 4 ) * nz(Gc[4])
// Variables:
float o = na
float h = na
float l = na
float c = na
float CU1 = na
float CU2 = na
float CU = na
float CD1 = na
float CD2 = na
float CD = na
float L0 = na
float L1 = na
float L2 = na
float L3 = na

// Calculations
o := (Go + nz(Gc[1])) / 2.0
h := math.max(Gh, nz(Gc[1]))
l := math.min(Gl, nz(Gc[1]))
c := (o + h + l + Gc) / 4.0
gamma = math.log(math.sum((math.max(Gh, nz(Gc[1])) - math.min(Gl, nz(Gc[1]))), nFE) / (ta.highest(Gh, nFE) - ta.lowest(Gl, nFE))) / math.log(nFE)
L0 := (1.0 - gamma) * Gc + gamma * nz(L0[1])
L1 := -gamma * L0 + nz(L0[1]) + gamma * nz(L1[1])
L2 := -gamma * L1 + nz(L1[1]) + gamma * nz(L2[1])
L3 := -gamma * L2 + nz(L2[1]) + gamma * nz(L3[1])
if L0 >= L1
    CU1 := L0 - L1
    CD1 := 0
else
    CD1 := L1 - L0
    CU1 := 0

if L1 >= L2
    CU2 := CU1 + L1 - L2
    CD2 := CD1
else
    CD2 := CD1 + L2 - L1
    CU2 := CU1

if L2 >= L3
    CU := CU2 + L2 - L3
    CD := CD2
else
    CU := CU2
    CD := CD2 + L3 - L2

lrsife_LaRSI = (CU + CD != 0) ? 100 * (CU / (CU + CD)) : 0


////////////////////////////////////////////////////////////////////////////////
// Laguerre RSI Plotting
////////////////////////////////////////////////////////////////////////////////

LaRSI = (lrsiType == LRSI_Type.LaguerreRSI_FractalEnergy) ? lrsife_LaRSI : lrsi_LaRSI
plot(LaRSI, title='Laguerre RSI', linewidth=2, color=color.white)


////////////////////////////////////////////////////////////////////////////////
// Trend
////////////////////////////////////////////////////////////////////////////////

prevBarTrend = haClose[1] >= haOpen[1] ? 1 : -1
currBarTrend = haClose[0] >= haOpen[0] ? 1 : -1
trendColor = (currBarTrend == prevBarTrend and currBarTrend > 0) ? color.green : ((currBarTrend == prevBarTrend and currBarTrend < 0) ? color.red : color.yellow)
plotshape(50, title="Trend Dots", style = shape.circle, location = location.absolute, color = trendColor, size = size.tiny, display = display.pane)


////////////////////////////////////////////////////////////////////////////////
// Alerts
////////////////////////////////////////////////////////////////////////////////

// Enter long - LRSI
enterLongLRSI = ta.crossover(LaRSI, 20)
plotshape(enterLongLRSI, title="Enter LONG - LRSI", style=shape.arrowup, location=location.belowbar, color=color.green, size=size.normal, force_overlay=true, display=display.pane)
alertcondition(enterLongLRSI, title='Enter LONG - LRSI', message='Laguerre RSI crossed OVER 20')
// Re-enter long - Return to same color trend dot
reenterLongSameTrendDot = (emaFast > emaSlow) and (currBarTrend == 1) and (currBarTrend[1] == 1) and (currBarTrend[1] != prevBarTrend[1])
plotshape(reenterLongSameTrendDot, title="Re-enter LONG - Same Trend Dot", style=shape.triangleup, location=location.belowbar, color=color.green, size=size.auto, force_overlay=true, display=display.pane)
alertcondition(reenterLongSameTrendDot, title='Re-enter LONG - Same Trend Dot', message='Trend returning to bullish')
// Any enter long
anyEnterLong = enterLongLRSI or reenterLongSameTrendDot
alertcondition(anyEnterLong, title='Enter LONG - Any')


// Enter short - LRSI
enterShortLRSI = ta.crossunder(LaRSI, 80)
plotshape(enterShortLRSI, title="Enter SHORT - LRSI", style=shape.arrowdown, location=location.abovebar, color=color.red, size=size.normal, force_overlay=true, display=display.pane)
alertcondition(enterShortLRSI, title='Enter SHORT - LRSI', message='Laguerre RSI crossed UNDER 80')
// Re-enter short - Return to same color trend dot
reenterShortSameTrendDot = (emaFast < emaSlow) and (currBarTrend == -1) and (currBarTrend[1] == -1) and (currBarTrend[1] != prevBarTrend[1])
plotshape(reenterShortSameTrendDot, title="Re-enter SHORT - Same Trend Dot", style=shape.triangledown, location=location.abovebar, color=color.red, size=size.auto, force_overlay=true, display=display.pane)
alertcondition(reenterShortSameTrendDot, title='Re-enter SHORT - Same Trend Dot', message='Trend returning to bearish')
// Any enter short
anyEnterShort = enterShortLRSI or reenterShortSameTrendDot
alertcondition(anyEnterShort, title='Enter SHORT - Any')


bgcolor(enterLongLRSI ? color.new(color.green, 50) : enterShortLRSI ? color.new(color.red, 50) : na, title="LRSI Entry Signal Background")


// Exit long - Opposite flat top
exitLongOppositeFlatTop = (emaFast > emaSlow) and (haClose < haOpen) and (haHigh == haOpen)
plotshape(exitLongOppositeFlatTop, title="Exit LONG - Opposite Flat Top", style=shape.xcross, location=location.abovebar, color=color.green, size=size.auto, force_overlay=true, display=display.pane)
alertcondition(exitLongOppositeFlatTop, title='Exit LONG - Opposite Flat Top', message='Bearish HA candle with flat top')
// Exit long - Opposite color trend dot
exitLongOppositeTrendDot = (emaFast > emaSlow) and (currBarTrend == -1) and (currBarTrend[1] == -1) and (currBarTrend[1] != prevBarTrend[1])
plotshape(exitLongOppositeTrendDot, title="Exit LONG - Opposite Trend", style=shape.xcross, location=location.abovebar, color=color.green, size=size.auto, force_overlay=true, display=display.pane)
alertcondition(exitLongOppositeTrendDot, title='Exit LONG - Opposite Trend', message='Bearish trend dot')
// Any exit long
anyExitLong = exitLongOppositeFlatTop or exitLongOppositeTrendDot
alertcondition(anyExitLong, title='Exit LONG - Any')


// Exit short - Opposite flat bottom
exitShortOppositeFlatBottom = (emaFast < emaSlow) and (haClose > haOpen) and (haLow == haOpen)
plotshape(exitShortOppositeFlatBottom, title="Exit SHORT - Opposite Flat Bottom", style=shape.xcross, location=location.belowbar, color=color.red, size=size.auto, force_overlay=true, display=display.pane)
alertcondition(exitShortOppositeFlatBottom, title='Exit SHORT - Opposite Flat Bottom', message='Bullish HA candle with flat bottom')
// Exit short - Opposite color trend dot
exitShortOppositeTrendDot = (emaFast < emaSlow) and (currBarTrend == 1) and (currBarTrend[1] == 1) and (currBarTrend[1] != prevBarTrend[1])
plotshape(exitShortOppositeTrendDot, title="Exit SHORT - Opposite Trend", style=shape.xcross, location=location.belowbar, color=color.red, size=size.auto, force_overlay=true, display=display.pane)
alertcondition(exitShortOppositeTrendDot, title='Exit SHORT - Opposite Trend', message='Bullish trend dot')
// Any exit short
anyExitShort = exitShortOppositeFlatBottom or exitShortOppositeTrendDot
alertcondition(anyExitShort, title='Exit SHORT - Any')


////////////////////////////////////////////////////////////////////////////////
// Helpers
////////////////////////////////////////////////////////////////////////////////

enum MAType
    SMA
    EMA

ma1Enabled = input.bool(false, "Enable MA1", group="MA 1")
ma1Len = input.int(100, "Length", minval=1, inline="MA1", group="MA 1")
ma1Type = input.enum(MAType.SMA, "Type", inline="MA1", group="MA 1")
ma1 = (ma1Type == MAType.EMA) ? ta.ema(realClose, ma1Len) : ta.sma(realClose, ma1Len)
plot(ma1Enabled ? ma1 : na, "MA1", color.fuchsia, linewidth=2, force_overlay=true)

ma2Enabled = input.bool(false, "Enable MA2", group="MA 2")
ma2Len = input.int(200, "Length", minval=1, inline="MA2", group="MA 2")
ma2Type = input.enum(MAType.SMA, "Type", inline="MA2", group="MA 2")
ma2 = (ma2Type == MAType.EMA) ? ta.ema(realClose, ma2Len) : ta.sma(realClose, ma2Len)
plot(ma2Enabled ? ma2 : na, "MA2", color.yellow, linewidth=2, force_overlay=true)

vwapEnabled = input.bool(false, "Enable VWAP", group="VWAP")
vwap = ta.vwap(realClose)
plot(vwapEnabled ? vwap : na, "VWAP", color.aqua, linewidth=2, force_overlay=true)
